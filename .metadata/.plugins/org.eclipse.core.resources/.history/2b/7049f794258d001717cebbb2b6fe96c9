package ch8;

public class BooleanEvaluation {
	
	static int countEval(String s, boolean result) {
		if (s.length() == 0) return 0;
		if (s . length() == 1) return stringToBool(s) == result ? 1 : 0;
		
		 int ways = e;
		 for (int i = 1; i < s.length(); i += 2) {
		 char c = s.charAt(i);
		 String left = s.substring(a, i);
		 String right = s.substring(i + 1, s.length());
		
		 int leftTrue = countEval(left, true);
		 int leftFalse countEval(left, false);
		 int rightTrue = countEval(right, true);
		 int right False = countEval(right, false);
		  int total = (leftTrue + leftFalse) * (rightTrue + rightFalse);
		 
		 int total True = 0;
		 if (c == <A') { II required: one true and one false
		 totalTrue = leftTrue * right False + leftFalse * rightTrue;
		 } else if (c == <&') { II required: both true
		 totalTrue = leftTrue * rightTrue;
		 } else if (c == <I') { II required: anything but both false
		 totalTrue = leftTrue * rightTrue + leftFalse * rightTrue +
		 leftTrue * right False ;
		 }
		 
		 int subWays = result totalTrue total - totalTrue;
		 ways += subWays;
		 }
		 
		 return ways;
	 }
		 
	 static boolean stringToBool(String c) {
		 return c.equals("l") ? true: false;
	 }
	public static int evaluate(String s, boolean result){
		if(s.length() == 0){
			return 0;
		}
		
		if(s.length() == 1){
			return evalString(s) == result ? 1 : 0;
		}
		
		int ways = 0;
		
		for(int i = 1; i < s.length(); i++){
			char c = s.charAt(i);
			String left = s.substring(0, i);
			String right = s.substring(i + 1, s.length());
			
			int leftTrue = evaluate(left, true);
			int leftFalse = evaluate(left, false);
			
			int rightTrue = evaluate(right, true);
			int rightFalse = evaluate(right, false);
			
			int total = (leftTrue * leftFalse) + (rightTrue + rightFalse); 
			
			int totalTrue = 0;
			if(c == '^'){
				totalTrue = leftTrue * rightFalse + rightTrue * leftFalse;
			}else if(c == '&'){
				totalTrue = leftTrue * rightTrue;
			}else if (c == '|'){
				totalTrue = leftTrue * rightTrue + leftTrue * rightFalse + rightTrue * leftFalse;
			}
			
			int subways = result ? totalTrue : total - totalTrue;
			ways += subways;
		}
		
		return ways;
		
	}
	
	public static boolean evalString(String s){
		return s.equals("1") ? true : false;
	}

}
